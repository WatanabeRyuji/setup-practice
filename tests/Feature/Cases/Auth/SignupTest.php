<?php

declare(strict_types=1);

namespace Tests\Feature\Cases\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\Feature\Cases\User\UserTestCase;

class SignupTest extends UserTestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * 正しい情報でサインアップできる
     * @return void
     */
    public function test_can_signup_with_valid_data(): void
    {
        $this->postJson(route('api.auth.register'), [
            'name' => 'test',
            'email' => 'test1@test.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ])
            ->assertOk()
            ->assertJson(
                fn (AssertableJson $json) => $json
                    ->where('name', 'test')
                    ->where('email', 'test1@test.com')
                    ->has('token')
                    ->has('refresh_token')
            );

        $this->assertDatabaseHas('users', [
            'name' => 'test',
            'email' => 'test1@test.com',
        ]);
        $this->assertAuthenticated('sanctum');
    }

    /**
     * 重複しているアドレスで登録できない
     * @return void
     */
    public function test_can_not_sinup_with_duplicated_email(): void
    {
        $this->postJson(route('api.auth.register'), [
            'name' => 'test',
            'email' => 'test@test.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ])
            ->assertUnprocessable()
            ->assertJson(
                fn (AssertableJson $json) => $json
                    ->has('message')
                    ->has(
                        'errors',
                        fn (AssertableJson $json) => $json
                            ->has('email')
                    )
            );

        $this->assertGuest('sanctum');
    }
}
